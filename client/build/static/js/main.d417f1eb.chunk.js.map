{"version":3,"sources":["logo.svg","OtherPage.js","Fib.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","to","Fib","state","seenIndexes","values","index","handleSubmit","event","a","preventDefault","axios","post","setState","this","fetchValues","fetchIndexes","get","data","map","number","join","entries","key","push","onSubmit","value","onChange","target","renderSeenIndexes","renderValues","Component","App","className","src","logo","alt","exact","path","component","OtherPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,yMCG7B,aACV,OACI,mDAEI,kBAAC,IAAD,CAAMC,GAAG,KAAT,kB,yECwEGC,E,4MA3EXC,MAAQ,CACJC,YAAa,GACbC,OAAQ,GACRC,MAAO,I,EAsBXC,a,uCAAe,WAAOC,GAAP,SAAAC,EAAA,6DACXD,EAAME,iBADK,SAGLC,IAAMC,KAAK,cAAe,CAC5BN,MAAO,EAAKH,MAAMG,QAJX,OAMX,EAAKO,SAAS,CAAEP,MAAO,KANZ,2C,wHAlBXQ,KAAKC,cACLD,KAAKE,iB,oKAIgBL,IAAMM,IAAI,uB,OAAzBZ,E,OACNS,KAAKD,SAAS,CACVR,OAAQA,EAAOa,O,2QAKOP,IAAMM,IAAI,mB,OAA9Bb,E,OACNU,KAAKD,SAAS,CACVT,YAAaA,EAAYc,O,gJAc7B,OAAOJ,KAAKX,MAAMC,YAAYe,KAAI,qBAAGC,UAAqBC,KAAK,Q,qCAI/D,IAAMC,EAAU,GAEhB,IAAK,IAAIC,KAAOT,KAAKX,MAAME,OACvBiB,EAAQE,KACJ,yBAAKD,IAAKA,GAAV,aACeA,EADf,iBACkCT,KAAKX,MAAME,OAAO,CAACkB,UAM7D,OAAOD,I,+BAGD,IAAD,OACL,OACI,6BACI,0BAAMG,SAAUX,KAAKP,cACjB,oDACA,2BACImB,MAAOZ,KAAKX,MAAMG,MAClBqB,SAAU,SAAAnB,GAAK,OAAI,EAAKK,SAAS,CAAEP,MAAOE,EAAMoB,OAAOF,WAE3D,2CAGJ,oDACCZ,KAAKe,oBAEN,kDACCf,KAAKgB,oB,GAtEJC,aCuBHC,MAnBf,WACE,OACE,kBAAC,IAAD,KACI,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,wBAAIH,UAAU,aAAd,oBACA,kBAAC,IAAD,CAAMhC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,cAAT,eAEF,6BACE,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjC,kBAAC,IAAD,CAAOoC,KAAK,aAAaC,UAAWC,QCP5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d417f1eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default() => {\n    return (\n        <div>\n            Im some other page!\n            <Link to=\"/\">Go back home</Link>\n        </div>\n    );\n};","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Fib extends Component {\n    state = {\n        seenIndexes: [],\n        values: {},\n        index: ''  \n    };\n\n    componentDidMount() {\n        this.fetchValues();\n        this.fetchIndexes();\n    }\n\n    async fetchValues() {\n        const values = await axios.get('/api/values/current');\n        this.setState({ \n            values: values.data\n        });\n    }\n\n    async fetchIndexes() {\n        const seenIndexes = await axios.get('/api/values/all');\n        this.setState({ \n            seenIndexes: seenIndexes.data \n        });\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        await axios.post('/api/values', {\n            index: this.state.index\n        });\n        this.setState({ index: '' })\n    };\n\n    renderSeenIndexes() {\n        return this.state.seenIndexes.map(({ number }) => number).join(', ');\n    }\n\n    renderValues() {\n        const entries = [];\n\n        for (let key in this.state.values) {\n            entries.push(\n                <div key={key}>\n                    For index {key} I calculated {this.state.values[{key}]}\n                </div>\n            );\n            \n        }\n\n        return entries;\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label>Enter your index:</label>\n                    <input\n                        value={this.state.index}\n                        onChange={event => this.setState({ index: event.target.value })}\n                    />                    \n                    <button>Submit</button>\n                </form>\n\n                <h3>Indexes I have seen:</h3>\n                {this.renderSeenIndexes()}\n\n                <h3>Calculated Values:</h3>\n                {this.renderValues()}\n            </div>\n        );\n    }\n}\n\nexport default Fib;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport OtherPage from  './OtherPage';\nimport Fib from './Fib';\n\nfunction App() {\n  return (\n    <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Welcome to React</h1>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/otherpage\">Other Page</Link>\n          </header>\n          <div>\n            <Route exact path=\"/\" component={Fib} />\n            <Route path=\"/otherpage\" component={OtherPage} />\n          </div>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}